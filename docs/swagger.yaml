openapi: 3.0.2
info:
  title: erxBank
  version: 1.0.0
paths:
  /users:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postUsersRequest'
        required: true
      tags:
        - users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userObject'
          description: User successfully registered
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Invalid password:
                  value:
                    error: Invalid password
                Parameter is required:
                  value:
                    error: 'User validation failed: (param): Path (param) is required.'
          description: Bad request
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Username already exists:
                  value:
                    error: Username already exists
          description: Username already exist
      summary: Registers a new user
  /sessions:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postSessionsRequest'
        required: true
      tags:
        - sessions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSessionsResponse'
          description: User logged in successfully
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Invalid username/password:
                  value:
                    error: Invalid username/password
                Invalid token:
                  value:
                    error: Invalid token
          description: Invalid username/password
      summary: Logs the user in
    delete:
      tags:
        - sessions
      responses:
        '204':
          description: User logged out successfully
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Missin Authorization header:
                  value:
                    error: Missing Authorization header
                Invalid token:
                  value:
                    error: Invalid token
          description: Unauthorized
      summary: Logs the user out
  /users/current:
    summary: Returns currently logged in user's data
    get:
      tags:
        - users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUsersCurrentResponse'
          description: Successful request
          '401':
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/errorResponse'
                examples:
                  Missin Authorization header:
                    value:
                      error: Missing Authorization header
                  Invalid token:
                    value:
                      error: Invalid token
            description: Unauthorized
      security:
        -
          Token: []
      summary: Returns user's data
components:
  schemas:
    userObject:
      title: userObject
      description: ''
      type: object
      properties:
        accounts:
          description: Array of user's bank accounts
          type: array
          items:
            $ref: '#/components/schemas/account'
        password:
          type: string
        name:
          description: User's full name
          type: string
        username:
          type: string
        id:
          description: User's ID
          type: string
      example:
        id: 5f7ed36f7901dd2c65c57a8e
        name: Sasuke Uchiha
        username: sasuke
        accounts:
          -
            name: Main
            balance: 100000
            currency: EUR
            number: erx6877e78200596839a6b30c655efaaf29
            id: 5f7ed36f7901dd2c65c57a8f
    postUsersRequest:
      title: POST /users request
      description: ''
      required:
        - name
        - username
        - password
      type: object
      properties:
        name:
          description: User's full name
          type: string
        username:
          description: Desired username
          type: string
        password:
          format: password
          description: Desired password
          type: string
      example:
        name: Sasuke Uchiha
        username: sasuke
        password: narutouzumaki
    errorResponse:
      title: errorResponse
      description: ''
      type: object
      properties:
        error:
          type: string
      example:
        error: error message.
    postSessionsRequest:
      title: POST /sessions request
      description: ''
      type: object
      properties:
        username:
          description: A valid username
          type: string
        password:
          description: The password associated with given username
          type: string
      example:
        username: sasuke
        password: narutouzumaki
    postSessionsResponse:
      title: POST /sessions response
      description: ''
      type: object
      properties:
        token:
          description: >-
            A session token which needs to be sent back to the server in Authorization header with
            every request (Authorization: Bearer <token>)
          type: string
      example:
        token: 5f85c4c591c8bdc811c64023
    getUsersCurrentResponse:
      title: Root Type for getUsersCurrentResponse
      description: ''
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        username:
          type: string
        accounts:
          description: Array of user's accounts
          type: array
          items:
            $ref: '#/components/schemas/account'
      example:
        id: 5f856e7c2f9e4eb8e3dba409
        name: Erx
        username: erx
        accounts:
          -
            name: Main
            balance: 100000
            currency: EUR
            number: erxe3e2901037bde2f09f04563eff8a51b4
    account:
      title: Root Type for account
      description: ''
      type: object
      properties:
        name:
          type: string
        balance:
          type: integer
        currency:
          type: string
        number:
          type: string
      example:
        name: Main
        balance: 100000
        currency: EUR
        number: erxe3e2901037bde2f09f04563eff8a51b4
  securitySchemes:
    Token:
      scheme: bearer
      type: http
      description: A Bearer scheme
security:
  -
    Token: []
